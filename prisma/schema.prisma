generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://thanhtikeaung:workatMTM123@dev02-report-sys.czy4ea0wywhv.ap-southeast-1.rds.amazonaws.com:3306/dev02_report_sys"
}

model User {
  id                  Int @id @default(autoincrement())
  name                String
  email               String  @unique
  password            String
  role                Role
  is_active           Boolean @default(true)
  workflows_url       String? @db.VarChar(255)
  can_report          Boolean @default(false)
  supervisor_id       Int?
  supervisor          User? @relation("UserToSupervisor", fields: [supervisor_id], references: [id])
  subordinates        User[] @relation("UserToSupervisor")
  attendance_reported Attendance[] @relation(name: "ReporterRelation")
  attendance_created  Attendance[] @relation(name: "CreatorRelation")
  reports             Report[]
  project_id          Int
  project             Project @relation(fields: [project_id], references: [id])
  adaptive_cards      AdaptiveCardMessage[]
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
}

model Attendance {
  id            Int @id @default(autoincrement())
  type          AttendanceType
  workspace     WorkSpace?
  project       String
  leave_period  LeavePeriod?
  leave_reason  String?
  late_minute   Int?
  reported_by   Int
  reporter      User  @relation(name: "ReporterRelation", fields: [reported_by], references: [id])
  status        AttendanceStatus
  created_by    Int
  creator       User  @relation(name: "CreatorRelation", fields: [created_by], references: [id])
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
}

model Project {
  id          Int @id @default(autoincrement())
  name        String
  color       String @default("#5b87ff")
  users       User[]
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
}

model Report {
  id                Int @id @default(autoincrement())
  project           String
  task_title        String
  task_description  String
  progress          Int
  man_hours         Float
  working_time      Int
  user              User @relation(fields: [user_id], references: [id])
  user_id           Int
  created_at        DateTime @default(now())
  updated_at        DateTime  @default(now())
}

model AdaptiveCardMessage {
  id            Int @id @default(autoincrement())
  card_message  String @db.LongText
  type          AdaptiveCardMessageType
  user          User @relation(fields: [user_id], references: [id])
  user_id       Int
  created_at    DateTime @default(now())
}

enum AttendanceType {
  working
  leave
}

enum WorkSpace {
  office
  home
}

enum LeavePeriod {
  full
  morning
  evening
}

enum AttendanceStatus {
  pending
  reported
  failed
}

enum Role {
  rootadmin
  manager
  bse
  leader
  subleader
  member
}

enum AdaptiveCardMessageType {
  attendance
  report
}